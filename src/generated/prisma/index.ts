// Code generated by Prisma (prisma@1.19.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  board: (where?: BoardWhereInput) => Promise<boolean>;
  company: (where?: CompanyWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  postForm: (where?: PostFormWhereInput) => Promise<boolean>;
  tag: (where?: TagWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  vote: (where?: VoteWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  board: (where: BoardWhereUniqueInput) => Board;
  boards: (
    args?: {
      where?: BoardWhereInput;
      orderBy?: BoardOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<BoardNode>;
  boardsConnection: (
    args?: {
      where?: BoardWhereInput;
      orderBy?: BoardOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => BoardConnection;
  company: (where: CompanyWhereUniqueInput) => Company;
  companies: (
    args?: {
      where?: CompanyWhereInput;
      orderBy?: CompanyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CompanyNode>;
  companiesConnection: (
    args?: {
      where?: CompanyWhereInput;
      orderBy?: CompanyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CompanyConnection;
  post: (where: PostWhereUniqueInput) => Post;
  posts: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<PostNode>;
  postsConnection: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PostConnection;
  postForm: (where: PostFormWhereUniqueInput) => PostForm;
  postForms: (
    args?: {
      where?: PostFormWhereInput;
      orderBy?: PostFormOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<PostFormNode>;
  postFormsConnection: (
    args?: {
      where?: PostFormWhereInput;
      orderBy?: PostFormOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PostFormConnection;
  tag: (where: TagWhereUniqueInput) => Tag;
  tags: (
    args?: {
      where?: TagWhereInput;
      orderBy?: TagOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<TagNode>;
  tagsConnection: (
    args?: {
      where?: TagWhereInput;
      orderBy?: TagOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TagConnection;
  user: (where: UserWhereUniqueInput) => User;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<UserNode>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnection;
  vote: (where: VoteWhereUniqueInput) => Vote;
  votes: (
    args?: {
      where?: VoteWhereInput;
      orderBy?: VoteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<VoteNode>;
  votesConnection: (
    args?: {
      where?: VoteWhereInput;
      orderBy?: VoteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => VoteConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBoard: (data: BoardCreateInput) => Board;
  updateBoard: (
    args: { data: BoardUpdateInput; where: BoardWhereUniqueInput }
  ) => Board;
  updateManyBoards: (
    args: { data: BoardUpdateInput; where?: BoardWhereInput }
  ) => BatchPayload;
  upsertBoard: (
    args: {
      where: BoardWhereUniqueInput;
      create: BoardCreateInput;
      update: BoardUpdateInput;
    }
  ) => Board;
  deleteBoard: (where: BoardWhereUniqueInput) => Board;
  deleteManyBoards: (where?: BoardWhereInput) => BatchPayload;
  createCompany: (data: CompanyCreateInput) => Company;
  updateCompany: (
    args: { data: CompanyUpdateInput; where: CompanyWhereUniqueInput }
  ) => Company;
  updateManyCompanies: (
    args: { data: CompanyUpdateInput; where?: CompanyWhereInput }
  ) => BatchPayload;
  upsertCompany: (
    args: {
      where: CompanyWhereUniqueInput;
      create: CompanyCreateInput;
      update: CompanyUpdateInput;
    }
  ) => Company;
  deleteCompany: (where: CompanyWhereUniqueInput) => Company;
  deleteManyCompanies: (where?: CompanyWhereInput) => BatchPayload;
  createPost: (data: PostCreateInput) => Post;
  updatePost: (
    args: { data: PostUpdateInput; where: PostWhereUniqueInput }
  ) => Post;
  updateManyPosts: (
    args: { data: PostUpdateInput; where?: PostWhereInput }
  ) => BatchPayload;
  upsertPost: (
    args: {
      where: PostWhereUniqueInput;
      create: PostCreateInput;
      update: PostUpdateInput;
    }
  ) => Post;
  deletePost: (where: PostWhereUniqueInput) => Post;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayload;
  createPostForm: (data: PostFormCreateInput) => PostForm;
  updatePostForm: (
    args: { data: PostFormUpdateInput; where: PostFormWhereUniqueInput }
  ) => PostForm;
  updateManyPostForms: (
    args: { data: PostFormUpdateInput; where?: PostFormWhereInput }
  ) => BatchPayload;
  upsertPostForm: (
    args: {
      where: PostFormWhereUniqueInput;
      create: PostFormCreateInput;
      update: PostFormUpdateInput;
    }
  ) => PostForm;
  deletePostForm: (where: PostFormWhereUniqueInput) => PostForm;
  deleteManyPostForms: (where?: PostFormWhereInput) => BatchPayload;
  createTag: (data: TagCreateInput) => Tag;
  updateTag: (
    args: { data: TagUpdateInput; where: TagWhereUniqueInput }
  ) => Tag;
  updateManyTags: (
    args: { data: TagUpdateInput; where?: TagWhereInput }
  ) => BatchPayload;
  upsertTag: (
    args: {
      where: TagWhereUniqueInput;
      create: TagCreateInput;
      update: TagUpdateInput;
    }
  ) => Tag;
  deleteTag: (where: TagWhereUniqueInput) => Tag;
  deleteManyTags: (where?: TagWhereInput) => BatchPayload;
  createUser: (data: UserCreateInput) => User;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => User;
  updateManyUsers: (
    args: { data: UserUpdateInput; where?: UserWhereInput }
  ) => BatchPayload;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => User;
  deleteUser: (where: UserWhereUniqueInput) => User;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayload;
  createVote: (data: VoteCreateInput) => Vote;
  updateVote: (
    args: { data: VoteUpdateInput; where: VoteWhereUniqueInput }
  ) => Vote;
  updateManyVotes: (
    args: { data: VoteUpdateInput; where?: VoteWhereInput }
  ) => BatchPayload;
  upsertVote: (
    args: {
      where: VoteWhereUniqueInput;
      create: VoteCreateInput;
      update: VoteUpdateInput;
    }
  ) => Vote;
  deleteVote: (where: VoteWhereUniqueInput) => Vote;
  deleteManyVotes: (where?: VoteWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  board: (
    where?: BoardSubscriptionWhereInput
  ) => BoardSubscriptionPayloadSubscription;
  company: (
    where?: CompanySubscriptionWhereInput
  ) => CompanySubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  postForm: (
    where?: PostFormSubscriptionWhereInput
  ) => PostFormSubscriptionPayloadSubscription;
  tag: (
    where?: TagSubscriptionWhereInput
  ) => TagSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  vote: (
    where?: VoteSubscriptionWhereInput
  ) => VoteSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type TagOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "details_ASC"
  | "details_DESC"
  | "joinedPictureUrl_ASC"
  | "joinedPictureUrl_DESC"
  | "status_ASC"
  | "status_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type VoteOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CompanyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "color_ASC"
  | "color_DESC"
  | "logoUrl_ASC"
  | "logoUrl_DESC"
  | "faviconUrl_ASC"
  | "faviconUrl_DESC"
  | "subdomain_ASC"
  | "subdomain_DESC"
  | "redirectURL_ASC"
  | "redirectURL_DESC"
  | "doSendEmails_ASC"
  | "doSendEmails_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "fullName_ASC"
  | "fullName_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "role_ASC"
  | "role_DESC"
  | "isAdmin_ASC"
  | "isAdmin_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type BoardOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "url_ASC"
  | "url_DESC"
  | "isPublic_ASC"
  | "isPublic_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PostFormOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "heading_ASC"
  | "heading_DESC"
  | "description_ASC"
  | "description_DESC"
  | "title_ASC"
  | "title_DESC"
  | "titlePlaceholder_ASC"
  | "titlePlaceholder_DESC"
  | "details_ASC"
  | "details_DESC"
  | "detailsPlaceholder_ASC"
  | "detailsPlaceholder_DESC"
  | "buttonText_ASC"
  | "buttonText_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface TagUpdateWithWhereUniqueWithoutBoardInput {
  where: TagWhereUniqueInput;
  data: TagUpdateWithoutBoardDataInput;
}

export type BoardWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
  url?: String;
}>;

export interface PostUpdateWithoutBoardDataInput {
  title?: String;
  details?: String;
  joinedPictureUrl?: String;
  tags?: TagUpdateManyInput;
  status?: String;
  votes?: VoteUpdateManyWithoutPostInput;
  owner?: UserUpdateOneRequiredInput;
}

export interface PostWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  details?: String;
  details_not?: String;
  details_in?: String[] | String;
  details_not_in?: String[] | String;
  details_lt?: String;
  details_lte?: String;
  details_gt?: String;
  details_gte?: String;
  details_contains?: String;
  details_not_contains?: String;
  details_starts_with?: String;
  details_not_starts_with?: String;
  details_ends_with?: String;
  details_not_ends_with?: String;
  joinedPictureUrl?: String;
  joinedPictureUrl_not?: String;
  joinedPictureUrl_in?: String[] | String;
  joinedPictureUrl_not_in?: String[] | String;
  joinedPictureUrl_lt?: String;
  joinedPictureUrl_lte?: String;
  joinedPictureUrl_gt?: String;
  joinedPictureUrl_gte?: String;
  joinedPictureUrl_contains?: String;
  joinedPictureUrl_not_contains?: String;
  joinedPictureUrl_starts_with?: String;
  joinedPictureUrl_not_starts_with?: String;
  joinedPictureUrl_ends_with?: String;
  joinedPictureUrl_not_ends_with?: String;
  tags_every?: TagWhereInput;
  tags_some?: TagWhereInput;
  tags_none?: TagWhereInput;
  status?: String;
  status_not?: String;
  status_in?: String[] | String;
  status_not_in?: String[] | String;
  status_lt?: String;
  status_lte?: String;
  status_gt?: String;
  status_gte?: String;
  status_contains?: String;
  status_not_contains?: String;
  status_starts_with?: String;
  status_not_starts_with?: String;
  status_ends_with?: String;
  status_not_ends_with?: String;
  votes_every?: VoteWhereInput;
  votes_some?: VoteWhereInput;
  votes_none?: VoteWhereInput;
  owner?: UserWhereInput;
  board?: BoardWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: PostWhereInput[] | PostWhereInput;
  OR?: PostWhereInput[] | PostWhereInput;
  NOT?: PostWhereInput[] | PostWhereInput;
}

export interface TagUpdateManyInput {
  create?: TagCreateInput[] | TagCreateInput;
  update?:
    | TagUpdateWithWhereUniqueNestedInput[]
    | TagUpdateWithWhereUniqueNestedInput;
  upsert?:
    | TagUpsertWithWhereUniqueNestedInput[]
    | TagUpsertWithWhereUniqueNestedInput;
  delete?: TagWhereUniqueInput[] | TagWhereUniqueInput;
  connect?: TagWhereUniqueInput[] | TagWhereUniqueInput;
  disconnect?: TagWhereUniqueInput[] | TagWhereUniqueInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  fullName?: String;
  fullName_not?: String;
  fullName_in?: String[] | String;
  fullName_not_in?: String[] | String;
  fullName_lt?: String;
  fullName_lte?: String;
  fullName_gt?: String;
  fullName_gte?: String;
  fullName_contains?: String;
  fullName_not_contains?: String;
  fullName_starts_with?: String;
  fullName_not_starts_with?: String;
  fullName_ends_with?: String;
  fullName_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  role?: String;
  role_not?: String;
  role_in?: String[] | String;
  role_not_in?: String[] | String;
  role_lt?: String;
  role_lte?: String;
  role_gt?: String;
  role_gte?: String;
  role_contains?: String;
  role_not_contains?: String;
  role_starts_with?: String;
  role_not_starts_with?: String;
  role_ends_with?: String;
  role_not_ends_with?: String;
  companies_every?: CompanyWhereInput;
  companies_some?: CompanyWhereInput;
  companies_none?: CompanyWhereInput;
  boards_every?: BoardWhereInput;
  boards_some?: BoardWhereInput;
  boards_none?: BoardWhereInput;
  postForms_every?: PostFormWhereInput;
  postForms_some?: PostFormWhereInput;
  postForms_none?: PostFormWhereInput;
  isAdmin?: Boolean;
  isAdmin_not?: Boolean;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface TagUpdateWithWhereUniqueNestedInput {
  where: TagWhereUniqueInput;
  data: TagUpdateDataInput;
}

export interface PostFormWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  heading?: String;
  heading_not?: String;
  heading_in?: String[] | String;
  heading_not_in?: String[] | String;
  heading_lt?: String;
  heading_lte?: String;
  heading_gt?: String;
  heading_gte?: String;
  heading_contains?: String;
  heading_not_contains?: String;
  heading_starts_with?: String;
  heading_not_starts_with?: String;
  heading_ends_with?: String;
  heading_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  titlePlaceholder?: String;
  titlePlaceholder_not?: String;
  titlePlaceholder_in?: String[] | String;
  titlePlaceholder_not_in?: String[] | String;
  titlePlaceholder_lt?: String;
  titlePlaceholder_lte?: String;
  titlePlaceholder_gt?: String;
  titlePlaceholder_gte?: String;
  titlePlaceholder_contains?: String;
  titlePlaceholder_not_contains?: String;
  titlePlaceholder_starts_with?: String;
  titlePlaceholder_not_starts_with?: String;
  titlePlaceholder_ends_with?: String;
  titlePlaceholder_not_ends_with?: String;
  details?: String;
  details_not?: String;
  details_in?: String[] | String;
  details_not_in?: String[] | String;
  details_lt?: String;
  details_lte?: String;
  details_gt?: String;
  details_gte?: String;
  details_contains?: String;
  details_not_contains?: String;
  details_starts_with?: String;
  details_not_starts_with?: String;
  details_ends_with?: String;
  details_not_ends_with?: String;
  detailsPlaceholder?: String;
  detailsPlaceholder_not?: String;
  detailsPlaceholder_in?: String[] | String;
  detailsPlaceholder_not_in?: String[] | String;
  detailsPlaceholder_lt?: String;
  detailsPlaceholder_lte?: String;
  detailsPlaceholder_gt?: String;
  detailsPlaceholder_gte?: String;
  detailsPlaceholder_contains?: String;
  detailsPlaceholder_not_contains?: String;
  detailsPlaceholder_starts_with?: String;
  detailsPlaceholder_not_starts_with?: String;
  detailsPlaceholder_ends_with?: String;
  detailsPlaceholder_not_ends_with?: String;
  buttonText?: String;
  buttonText_not?: String;
  buttonText_in?: String[] | String;
  buttonText_not_in?: String[] | String;
  buttonText_lt?: String;
  buttonText_lte?: String;
  buttonText_gt?: String;
  buttonText_gte?: String;
  buttonText_contains?: String;
  buttonText_not_contains?: String;
  buttonText_starts_with?: String;
  buttonText_not_starts_with?: String;
  buttonText_ends_with?: String;
  buttonText_not_ends_with?: String;
  board?: BoardWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: PostFormWhereInput[] | PostFormWhereInput;
  OR?: PostFormWhereInput[] | PostFormWhereInput;
  NOT?: PostFormWhereInput[] | PostFormWhereInput;
}

export interface BoardCreateWithoutPostFormInput {
  name: String;
  url: String;
  isPublic?: Boolean;
  tags?: TagCreateManyWithoutBoardInput;
  posts?: PostCreateManyWithoutBoardInput;
  owner: UserCreateOneWithoutBoardsInput;
  company: CompanyCreateOneWithoutBoardsInput;
}

export interface VoteUpdateWithWhereUniqueWithoutPostInput {
  where: VoteWhereUniqueInput;
  data: VoteUpdateWithoutPostDataInput;
}

export interface CompanyCreateOneWithoutBoardsInput {
  create?: CompanyCreateWithoutBoardsInput;
  connect?: CompanyWhereUniqueInput;
}

export interface TagUpdateDataInput {
  title?: String;
  board?: BoardUpdateOneRequiredWithoutTagsInput;
}

export interface CompanyCreateWithoutBoardsInput {
  name: String;
  color?: String;
  logoUrl?: String;
  faviconUrl?: String;
  subdomain?: String;
  users?: UserCreateManyWithoutCompaniesInput;
  redirectURL?: String;
  doSendEmails?: Boolean;
}

export interface TagWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  board?: BoardWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: TagWhereInput[] | TagWhereInput;
  OR?: TagWhereInput[] | TagWhereInput;
  NOT?: TagWhereInput[] | TagWhereInput;
}

export interface UserCreateManyWithoutCompaniesInput {
  create?: UserCreateWithoutCompaniesInput[] | UserCreateWithoutCompaniesInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface TagSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TagWhereInput;
  AND?: TagSubscriptionWhereInput[] | TagSubscriptionWhereInput;
  OR?: TagSubscriptionWhereInput[] | TagSubscriptionWhereInput;
  NOT?: TagSubscriptionWhereInput[] | TagSubscriptionWhereInput;
}

export interface UserCreateWithoutCompaniesInput {
  fullName: String;
  email: String;
  password: String;
  role: String;
  boards?: BoardCreateManyWithoutOwnerInput;
  postForms?: PostFormCreateManyInput;
  isAdmin?: Boolean;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PostWhereInput;
  AND?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  OR?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  NOT?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
}

export interface BoardCreateManyWithoutOwnerInput {
  create?: BoardCreateWithoutOwnerInput[] | BoardCreateWithoutOwnerInput;
  connect?: BoardWhereUniqueInput[] | BoardWhereUniqueInput;
}

export interface BoardSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: BoardWhereInput;
  AND?: BoardSubscriptionWhereInput[] | BoardSubscriptionWhereInput;
  OR?: BoardSubscriptionWhereInput[] | BoardSubscriptionWhereInput;
  NOT?: BoardSubscriptionWhereInput[] | BoardSubscriptionWhereInput;
}

export interface BoardCreateWithoutOwnerInput {
  name: String;
  url: String;
  isPublic?: Boolean;
  postForm: PostFormCreateOneWithoutBoardInput;
  tags?: TagCreateManyWithoutBoardInput;
  posts?: PostCreateManyWithoutBoardInput;
  company: CompanyCreateOneWithoutBoardsInput;
}

export interface PostUpdateWithoutVotesDataInput {
  title?: String;
  details?: String;
  joinedPictureUrl?: String;
  tags?: TagUpdateManyInput;
  status?: String;
  owner?: UserUpdateOneRequiredInput;
  board?: BoardUpdateOneRequiredWithoutPostsInput;
}

export interface VoteCreateManyWithoutPostInput {
  create?: VoteCreateWithoutPostInput[] | VoteCreateWithoutPostInput;
  connect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
}

export interface VoteUpdateInput {
  owner?: UserUpdateOneRequiredInput;
  post?: PostUpdateOneRequiredWithoutVotesInput;
}

export interface VoteCreateWithoutPostInput {
  owner: UserCreateOneInput;
}

export type CompanyWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
  subdomain?: String;
}>;

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface VoteCreateInput {
  owner: UserCreateOneInput;
  post: PostCreateOneWithoutVotesInput;
}

export interface UserCreateInput {
  fullName: String;
  email: String;
  password: String;
  role: String;
  companies?: CompanyCreateManyWithoutUsersInput;
  boards?: BoardCreateManyWithoutOwnerInput;
  postForms?: PostFormCreateManyInput;
  isAdmin?: Boolean;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface BoardUpdateInput {
  name?: String;
  url?: String;
  isPublic?: Boolean;
  postForm?: PostFormUpdateOneRequiredWithoutBoardInput;
  tags?: TagUpdateManyWithoutBoardInput;
  posts?: PostUpdateManyWithoutBoardInput;
  owner?: UserUpdateOneRequiredWithoutBoardsInput;
  company?: CompanyUpdateOneRequiredWithoutBoardsInput;
}

export interface PostFormUpdateInput {
  heading?: String;
  description?: String;
  title?: String;
  titlePlaceholder?: String;
  details?: String;
  detailsPlaceholder?: String;
  buttonText?: String;
  board?: BoardUpdateOneRequiredWithoutPostFormInput;
}

export interface PostFormUpdateOneRequiredWithoutBoardInput {
  create?: PostFormCreateWithoutBoardInput;
  update?: PostFormUpdateWithoutBoardDataInput;
  upsert?: PostFormUpsertWithoutBoardInput;
  connect?: PostFormWhereUniqueInput;
}

export type PostFormWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PostFormUpdateWithoutBoardDataInput {
  heading?: String;
  description?: String;
  title?: String;
  titlePlaceholder?: String;
  details?: String;
  detailsPlaceholder?: String;
  buttonText?: String;
}

export interface BoardUpdateOneRequiredWithoutPostsInput {
  create?: BoardCreateWithoutPostsInput;
  update?: BoardUpdateWithoutPostsDataInput;
  upsert?: BoardUpsertWithoutPostsInput;
  connect?: BoardWhereUniqueInput;
}

export interface PostFormUpsertWithoutBoardInput {
  update: PostFormUpdateWithoutBoardDataInput;
  create: PostFormCreateWithoutBoardInput;
}

export type TagWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface TagUpdateManyWithoutBoardInput {
  create?: TagCreateWithoutBoardInput[] | TagCreateWithoutBoardInput;
  delete?: TagWhereUniqueInput[] | TagWhereUniqueInput;
  connect?: TagWhereUniqueInput[] | TagWhereUniqueInput;
  disconnect?: TagWhereUniqueInput[] | TagWhereUniqueInput;
  update?:
    | TagUpdateWithWhereUniqueWithoutBoardInput[]
    | TagUpdateWithWhereUniqueWithoutBoardInput;
  upsert?:
    | TagUpsertWithWhereUniqueWithoutBoardInput[]
    | TagUpsertWithWhereUniqueWithoutBoardInput;
}

export interface BoardCreateOneWithoutPostsInput {
  create?: BoardCreateWithoutPostsInput;
  connect?: BoardWhereUniqueInput;
}

export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  connect?: UserWhereUniqueInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface TagUpdateWithoutBoardDataInput {
  title?: String;
}

export interface CompanyCreateInput {
  name: String;
  color?: String;
  logoUrl?: String;
  faviconUrl?: String;
  subdomain?: String;
  users?: UserCreateManyWithoutCompaniesInput;
  boards?: BoardCreateManyWithoutCompanyInput;
  redirectURL?: String;
  doSendEmails?: Boolean;
}

export interface TagUpsertWithWhereUniqueWithoutBoardInput {
  where: TagWhereUniqueInput;
  update: TagUpdateWithoutBoardDataInput;
  create: TagCreateWithoutBoardInput;
}

export type VoteWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PostUpdateManyWithoutBoardInput {
  create?: PostCreateWithoutBoardInput[] | PostCreateWithoutBoardInput;
  delete?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  disconnect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  update?:
    | PostUpdateWithWhereUniqueWithoutBoardInput[]
    | PostUpdateWithWhereUniqueWithoutBoardInput;
  upsert?:
    | PostUpsertWithWhereUniqueWithoutBoardInput[]
    | PostUpsertWithWhereUniqueWithoutBoardInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface PostUpdateWithWhereUniqueWithoutBoardInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutBoardDataInput;
}

export interface PostFormCreateOneWithoutBoardInput {
  create?: PostFormCreateWithoutBoardInput;
  connect?: PostFormWhereUniqueInput;
}

export interface VoteWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  owner?: UserWhereInput;
  post?: PostWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: VoteWhereInput[] | VoteWhereInput;
  OR?: VoteWhereInput[] | VoteWhereInput;
  NOT?: VoteWhereInput[] | VoteWhereInput;
}

export interface TagCreateManyWithoutBoardInput {
  create?: TagCreateWithoutBoardInput[] | TagCreateWithoutBoardInput;
  connect?: TagWhereUniqueInput[] | TagWhereUniqueInput;
}

export interface CompanyWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  color?: String;
  color_not?: String;
  color_in?: String[] | String;
  color_not_in?: String[] | String;
  color_lt?: String;
  color_lte?: String;
  color_gt?: String;
  color_gte?: String;
  color_contains?: String;
  color_not_contains?: String;
  color_starts_with?: String;
  color_not_starts_with?: String;
  color_ends_with?: String;
  color_not_ends_with?: String;
  logoUrl?: String;
  logoUrl_not?: String;
  logoUrl_in?: String[] | String;
  logoUrl_not_in?: String[] | String;
  logoUrl_lt?: String;
  logoUrl_lte?: String;
  logoUrl_gt?: String;
  logoUrl_gte?: String;
  logoUrl_contains?: String;
  logoUrl_not_contains?: String;
  logoUrl_starts_with?: String;
  logoUrl_not_starts_with?: String;
  logoUrl_ends_with?: String;
  logoUrl_not_ends_with?: String;
  faviconUrl?: String;
  faviconUrl_not?: String;
  faviconUrl_in?: String[] | String;
  faviconUrl_not_in?: String[] | String;
  faviconUrl_lt?: String;
  faviconUrl_lte?: String;
  faviconUrl_gt?: String;
  faviconUrl_gte?: String;
  faviconUrl_contains?: String;
  faviconUrl_not_contains?: String;
  faviconUrl_starts_with?: String;
  faviconUrl_not_starts_with?: String;
  faviconUrl_ends_with?: String;
  faviconUrl_not_ends_with?: String;
  subdomain?: String;
  subdomain_not?: String;
  subdomain_in?: String[] | String;
  subdomain_not_in?: String[] | String;
  subdomain_lt?: String;
  subdomain_lte?: String;
  subdomain_gt?: String;
  subdomain_gte?: String;
  subdomain_contains?: String;
  subdomain_not_contains?: String;
  subdomain_starts_with?: String;
  subdomain_not_starts_with?: String;
  subdomain_ends_with?: String;
  subdomain_not_ends_with?: String;
  users_every?: UserWhereInput;
  users_some?: UserWhereInput;
  users_none?: UserWhereInput;
  boards_every?: BoardWhereInput;
  boards_some?: BoardWhereInput;
  boards_none?: BoardWhereInput;
  redirectURL?: String;
  redirectURL_not?: String;
  redirectURL_in?: String[] | String;
  redirectURL_not_in?: String[] | String;
  redirectURL_lt?: String;
  redirectURL_lte?: String;
  redirectURL_gt?: String;
  redirectURL_gte?: String;
  redirectURL_contains?: String;
  redirectURL_not_contains?: String;
  redirectURL_starts_with?: String;
  redirectURL_not_starts_with?: String;
  redirectURL_ends_with?: String;
  redirectURL_not_ends_with?: String;
  doSendEmails?: Boolean;
  doSendEmails_not?: Boolean;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: CompanyWhereInput[] | CompanyWhereInput;
  OR?: CompanyWhereInput[] | CompanyWhereInput;
  NOT?: CompanyWhereInput[] | CompanyWhereInput;
}

export interface PostCreateManyWithoutBoardInput {
  create?: PostCreateWithoutBoardInput[] | PostCreateWithoutBoardInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
}

export interface VoteUpdateWithoutPostDataInput {
  owner?: UserUpdateOneRequiredInput;
}

export interface TagCreateManyInput {
  create?: TagCreateInput[] | TagCreateInput;
  connect?: TagWhereUniqueInput[] | TagWhereUniqueInput;
}

export interface BoardWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  isPublic?: Boolean;
  isPublic_not?: Boolean;
  postForm?: PostFormWhereInput;
  tags_every?: TagWhereInput;
  tags_some?: TagWhereInput;
  tags_none?: TagWhereInput;
  posts_every?: PostWhereInput;
  posts_some?: PostWhereInput;
  posts_none?: PostWhereInput;
  owner?: UserWhereInput;
  company?: CompanyWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: BoardWhereInput[] | BoardWhereInput;
  OR?: BoardWhereInput[] | BoardWhereInput;
  NOT?: BoardWhereInput[] | BoardWhereInput;
}

export interface BoardCreateOneWithoutTagsInput {
  create?: BoardCreateWithoutTagsInput;
  connect?: BoardWhereUniqueInput;
}

export interface BoardUpdateOneRequiredWithoutTagsInput {
  create?: BoardCreateWithoutTagsInput;
  update?: BoardUpdateWithoutTagsDataInput;
  upsert?: BoardUpsertWithoutTagsInput;
  connect?: BoardWhereUniqueInput;
}

export interface UserCreateOneWithoutBoardsInput {
  create?: UserCreateWithoutBoardsInput;
  connect?: UserWhereUniqueInput;
}

export interface BoardUpdateWithoutTagsDataInput {
  name?: String;
  url?: String;
  isPublic?: Boolean;
  postForm?: PostFormUpdateOneRequiredWithoutBoardInput;
  posts?: PostUpdateManyWithoutBoardInput;
  owner?: UserUpdateOneRequiredWithoutBoardsInput;
  company?: CompanyUpdateOneRequiredWithoutBoardsInput;
}

export interface CompanyCreateManyWithoutUsersInput {
  create?: CompanyCreateWithoutUsersInput[] | CompanyCreateWithoutUsersInput;
  connect?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
}

export interface UserUpdateOneRequiredWithoutBoardsInput {
  create?: UserCreateWithoutBoardsInput;
  update?: UserUpdateWithoutBoardsDataInput;
  upsert?: UserUpsertWithoutBoardsInput;
  connect?: UserWhereUniqueInput;
}

export interface BoardCreateManyWithoutCompanyInput {
  create?: BoardCreateWithoutCompanyInput[] | BoardCreateWithoutCompanyInput;
  connect?: BoardWhereUniqueInput[] | BoardWhereUniqueInput;
}

export interface UserUpdateWithoutBoardsDataInput {
  fullName?: String;
  email?: String;
  password?: String;
  role?: String;
  companies?: CompanyUpdateManyWithoutUsersInput;
  postForms?: PostFormUpdateManyInput;
  isAdmin?: Boolean;
}

export interface PostFormCreateManyInput {
  create?: PostFormCreateInput[] | PostFormCreateInput;
  connect?: PostFormWhereUniqueInput[] | PostFormWhereUniqueInput;
}

export interface CompanyUpdateManyWithoutUsersInput {
  create?: CompanyCreateWithoutUsersInput[] | CompanyCreateWithoutUsersInput;
  delete?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
  connect?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
  disconnect?: CompanyWhereUniqueInput[] | CompanyWhereUniqueInput;
  update?:
    | CompanyUpdateWithWhereUniqueWithoutUsersInput[]
    | CompanyUpdateWithWhereUniqueWithoutUsersInput;
  upsert?:
    | CompanyUpsertWithWhereUniqueWithoutUsersInput[]
    | CompanyUpsertWithWhereUniqueWithoutUsersInput;
}

export interface BoardCreateOneWithoutPostFormInput {
  create?: BoardCreateWithoutPostFormInput;
  connect?: BoardWhereUniqueInput;
}

export interface CompanyUpdateWithWhereUniqueWithoutUsersInput {
  where: CompanyWhereUniqueInput;
  data: CompanyUpdateWithoutUsersDataInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface CompanyUpdateWithoutUsersDataInput {
  name?: String;
  color?: String;
  logoUrl?: String;
  faviconUrl?: String;
  subdomain?: String;
  boards?: BoardUpdateManyWithoutCompanyInput;
  redirectURL?: String;
  doSendEmails?: Boolean;
}

export interface CompanySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CompanyWhereInput;
  AND?: CompanySubscriptionWhereInput[] | CompanySubscriptionWhereInput;
  OR?: CompanySubscriptionWhereInput[] | CompanySubscriptionWhereInput;
  NOT?: CompanySubscriptionWhereInput[] | CompanySubscriptionWhereInput;
}

export interface BoardUpdateManyWithoutCompanyInput {
  create?: BoardCreateWithoutCompanyInput[] | BoardCreateWithoutCompanyInput;
  delete?: BoardWhereUniqueInput[] | BoardWhereUniqueInput;
  connect?: BoardWhereUniqueInput[] | BoardWhereUniqueInput;
  disconnect?: BoardWhereUniqueInput[] | BoardWhereUniqueInput;
  update?:
    | BoardUpdateWithWhereUniqueWithoutCompanyInput[]
    | BoardUpdateWithWhereUniqueWithoutCompanyInput;
  upsert?:
    | BoardUpsertWithWhereUniqueWithoutCompanyInput[]
    | BoardUpsertWithWhereUniqueWithoutCompanyInput;
}

export interface PostUpdateOneRequiredWithoutVotesInput {
  create?: PostCreateWithoutVotesInput;
  update?: PostUpdateWithoutVotesDataInput;
  upsert?: PostUpsertWithoutVotesInput;
  connect?: PostWhereUniqueInput;
}

export interface BoardUpdateWithWhereUniqueWithoutCompanyInput {
  where: BoardWhereUniqueInput;
  data: BoardUpdateWithoutCompanyDataInput;
}

export interface PostCreateOneWithoutVotesInput {
  create?: PostCreateWithoutVotesInput;
  connect?: PostWhereUniqueInput;
}

export interface BoardUpdateWithoutCompanyDataInput {
  name?: String;
  url?: String;
  isPublic?: Boolean;
  postForm?: PostFormUpdateOneRequiredWithoutBoardInput;
  tags?: TagUpdateManyWithoutBoardInput;
  posts?: PostUpdateManyWithoutBoardInput;
  owner?: UserUpdateOneRequiredWithoutBoardsInput;
}

export interface TagUpdateInput {
  title?: String;
  board?: BoardUpdateOneRequiredWithoutTagsInput;
}

export interface BoardUpsertWithWhereUniqueWithoutCompanyInput {
  where: BoardWhereUniqueInput;
  update: BoardUpdateWithoutCompanyDataInput;
  create: BoardCreateWithoutCompanyInput;
}

export interface BoardUpdateWithoutPostsDataInput {
  name?: String;
  url?: String;
  isPublic?: Boolean;
  postForm?: PostFormUpdateOneRequiredWithoutBoardInput;
  tags?: TagUpdateManyWithoutBoardInput;
  owner?: UserUpdateOneRequiredWithoutBoardsInput;
  company?: CompanyUpdateOneRequiredWithoutBoardsInput;
}

export interface CompanyUpsertWithWhereUniqueWithoutUsersInput {
  where: CompanyWhereUniqueInput;
  update: CompanyUpdateWithoutUsersDataInput;
  create: CompanyCreateWithoutUsersInput;
}

export interface BoardCreateWithoutPostsInput {
  name: String;
  url: String;
  isPublic?: Boolean;
  postForm: PostFormCreateOneWithoutBoardInput;
  tags?: TagCreateManyWithoutBoardInput;
  owner: UserCreateOneWithoutBoardsInput;
  company: CompanyCreateOneWithoutBoardsInput;
}

export interface PostFormUpdateManyInput {
  create?: PostFormCreateInput[] | PostFormCreateInput;
  update?:
    | PostFormUpdateWithWhereUniqueNestedInput[]
    | PostFormUpdateWithWhereUniqueNestedInput;
  upsert?:
    | PostFormUpsertWithWhereUniqueNestedInput[]
    | PostFormUpsertWithWhereUniqueNestedInput;
  delete?: PostFormWhereUniqueInput[] | PostFormWhereUniqueInput;
  connect?: PostFormWhereUniqueInput[] | PostFormWhereUniqueInput;
  disconnect?: PostFormWhereUniqueInput[] | PostFormWhereUniqueInput;
}

export interface CompanyUpdateInput {
  name?: String;
  color?: String;
  logoUrl?: String;
  faviconUrl?: String;
  subdomain?: String;
  users?: UserUpdateManyWithoutCompaniesInput;
  boards?: BoardUpdateManyWithoutCompanyInput;
  redirectURL?: String;
  doSendEmails?: Boolean;
}

export interface PostFormUpdateWithWhereUniqueNestedInput {
  where: PostFormWhereUniqueInput;
  data: PostFormUpdateDataInput;
}

export interface VoteUpsertWithWhereUniqueWithoutPostInput {
  where: VoteWhereUniqueInput;
  update: VoteUpdateWithoutPostDataInput;
  create: VoteCreateWithoutPostInput;
}

export interface PostFormUpdateDataInput {
  heading?: String;
  description?: String;
  title?: String;
  titlePlaceholder?: String;
  details?: String;
  detailsPlaceholder?: String;
  buttonText?: String;
  board?: BoardUpdateOneRequiredWithoutPostFormInput;
}

export interface BoardCreateInput {
  name: String;
  url: String;
  isPublic?: Boolean;
  postForm: PostFormCreateOneWithoutBoardInput;
  tags?: TagCreateManyWithoutBoardInput;
  posts?: PostCreateManyWithoutBoardInput;
  owner: UserCreateOneWithoutBoardsInput;
  company: CompanyCreateOneWithoutBoardsInput;
}

export interface BoardUpdateOneRequiredWithoutPostFormInput {
  create?: BoardCreateWithoutPostFormInput;
  update?: BoardUpdateWithoutPostFormDataInput;
  upsert?: BoardUpsertWithoutPostFormInput;
  connect?: BoardWhereUniqueInput;
}

export interface TagCreateWithoutBoardInput {
  title: String;
}

export interface BoardUpdateWithoutPostFormDataInput {
  name?: String;
  url?: String;
  isPublic?: Boolean;
  tags?: TagUpdateManyWithoutBoardInput;
  posts?: PostUpdateManyWithoutBoardInput;
  owner?: UserUpdateOneRequiredWithoutBoardsInput;
  company?: CompanyUpdateOneRequiredWithoutBoardsInput;
}

export interface TagCreateInput {
  title: String;
  board: BoardCreateOneWithoutTagsInput;
}

export interface CompanyUpdateOneRequiredWithoutBoardsInput {
  create?: CompanyCreateWithoutBoardsInput;
  update?: CompanyUpdateWithoutBoardsDataInput;
  upsert?: CompanyUpsertWithoutBoardsInput;
  connect?: CompanyWhereUniqueInput;
}

export interface UserCreateWithoutBoardsInput {
  fullName: String;
  email: String;
  password: String;
  role: String;
  companies?: CompanyCreateManyWithoutUsersInput;
  postForms?: PostFormCreateManyInput;
  isAdmin?: Boolean;
}

export interface CompanyUpdateWithoutBoardsDataInput {
  name?: String;
  color?: String;
  logoUrl?: String;
  faviconUrl?: String;
  subdomain?: String;
  users?: UserUpdateManyWithoutCompaniesInput;
  redirectURL?: String;
  doSendEmails?: Boolean;
}

export interface BoardCreateWithoutCompanyInput {
  name: String;
  url: String;
  isPublic?: Boolean;
  postForm: PostFormCreateOneWithoutBoardInput;
  tags?: TagCreateManyWithoutBoardInput;
  posts?: PostCreateManyWithoutBoardInput;
  owner: UserCreateOneWithoutBoardsInput;
}

export interface UserUpdateManyWithoutCompaniesInput {
  create?: UserCreateWithoutCompaniesInput[] | UserCreateWithoutCompaniesInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutCompaniesInput[]
    | UserUpdateWithWhereUniqueWithoutCompaniesInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutCompaniesInput[]
    | UserUpsertWithWhereUniqueWithoutCompaniesInput;
}

export interface VoteSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: VoteWhereInput;
  AND?: VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput;
  OR?: VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput;
  NOT?: VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput;
}

export interface UserUpdateWithWhereUniqueWithoutCompaniesInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutCompaniesDataInput;
}

export interface PostUpsertWithoutVotesInput {
  update: PostUpdateWithoutVotesDataInput;
  create: PostCreateWithoutVotesInput;
}

export interface UserUpdateWithoutCompaniesDataInput {
  fullName?: String;
  email?: String;
  password?: String;
  role?: String;
  boards?: BoardUpdateManyWithoutOwnerInput;
  postForms?: PostFormUpdateManyInput;
  isAdmin?: Boolean;
}

export interface UserUpdateInput {
  fullName?: String;
  email?: String;
  password?: String;
  role?: String;
  companies?: CompanyUpdateManyWithoutUsersInput;
  boards?: BoardUpdateManyWithoutOwnerInput;
  postForms?: PostFormUpdateManyInput;
  isAdmin?: Boolean;
}

export interface BoardUpdateManyWithoutOwnerInput {
  create?: BoardCreateWithoutOwnerInput[] | BoardCreateWithoutOwnerInput;
  delete?: BoardWhereUniqueInput[] | BoardWhereUniqueInput;
  connect?: BoardWhereUniqueInput[] | BoardWhereUniqueInput;
  disconnect?: BoardWhereUniqueInput[] | BoardWhereUniqueInput;
  update?:
    | BoardUpdateWithWhereUniqueWithoutOwnerInput[]
    | BoardUpdateWithWhereUniqueWithoutOwnerInput;
  upsert?:
    | BoardUpsertWithWhereUniqueWithoutOwnerInput[]
    | BoardUpsertWithWhereUniqueWithoutOwnerInput;
}

export interface PostUpdateInput {
  title?: String;
  details?: String;
  joinedPictureUrl?: String;
  tags?: TagUpdateManyInput;
  status?: String;
  votes?: VoteUpdateManyWithoutPostInput;
  owner?: UserUpdateOneRequiredInput;
  board?: BoardUpdateOneRequiredWithoutPostsInput;
}

export interface BoardUpdateWithWhereUniqueWithoutOwnerInput {
  where: BoardWhereUniqueInput;
  data: BoardUpdateWithoutOwnerDataInput;
}

export interface PostUpsertWithWhereUniqueWithoutBoardInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutBoardDataInput;
  create: PostCreateWithoutBoardInput;
}

export interface BoardUpdateWithoutOwnerDataInput {
  name?: String;
  url?: String;
  isPublic?: Boolean;
  postForm?: PostFormUpdateOneRequiredWithoutBoardInput;
  tags?: TagUpdateManyWithoutBoardInput;
  posts?: PostUpdateManyWithoutBoardInput;
  company?: CompanyUpdateOneRequiredWithoutBoardsInput;
}

export interface PostFormCreateWithoutBoardInput {
  heading?: String;
  description?: String;
  title?: String;
  titlePlaceholder?: String;
  details?: String;
  detailsPlaceholder?: String;
  buttonText?: String;
}

export interface BoardUpsertWithWhereUniqueWithoutOwnerInput {
  where: BoardWhereUniqueInput;
  update: BoardUpdateWithoutOwnerDataInput;
  create: BoardCreateWithoutOwnerInput;
}

export interface BoardCreateWithoutTagsInput {
  name: String;
  url: String;
  isPublic?: Boolean;
  postForm: PostFormCreateOneWithoutBoardInput;
  posts?: PostCreateManyWithoutBoardInput;
  owner: UserCreateOneWithoutBoardsInput;
  company: CompanyCreateOneWithoutBoardsInput;
}

export interface UserUpsertWithWhereUniqueWithoutCompaniesInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutCompaniesDataInput;
  create: UserCreateWithoutCompaniesInput;
}

export interface PostFormCreateInput {
  heading?: String;
  description?: String;
  title?: String;
  titlePlaceholder?: String;
  details?: String;
  detailsPlaceholder?: String;
  buttonText?: String;
  board: BoardCreateOneWithoutPostFormInput;
}

export interface CompanyUpsertWithoutBoardsInput {
  update: CompanyUpdateWithoutBoardsDataInput;
  create: CompanyCreateWithoutBoardsInput;
}

export interface PostCreateWithoutVotesInput {
  title: String;
  details: String;
  joinedPictureUrl?: String;
  tags?: TagCreateManyInput;
  status: String;
  owner: UserCreateOneInput;
  board: BoardCreateOneWithoutPostsInput;
}

export interface BoardUpsertWithoutPostFormInput {
  update: BoardUpdateWithoutPostFormDataInput;
  create: BoardCreateWithoutPostFormInput;
}

export interface PostCreateInput {
  title: String;
  details: String;
  joinedPictureUrl?: String;
  tags?: TagCreateManyInput;
  status: String;
  votes?: VoteCreateManyWithoutPostInput;
  owner: UserCreateOneInput;
  board: BoardCreateOneWithoutPostsInput;
}

export interface PostFormUpsertWithWhereUniqueNestedInput {
  where: PostFormWhereUniqueInput;
  update: PostFormUpdateDataInput;
  create: PostFormCreateInput;
}

export interface PostCreateWithoutBoardInput {
  title: String;
  details: String;
  joinedPictureUrl?: String;
  tags?: TagCreateManyInput;
  status: String;
  votes?: VoteCreateManyWithoutPostInput;
  owner: UserCreateOneInput;
}

export interface VoteUpdateManyWithoutPostInput {
  create?: VoteCreateWithoutPostInput[] | VoteCreateWithoutPostInput;
  delete?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  connect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  disconnect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput;
  update?:
    | VoteUpdateWithWhereUniqueWithoutPostInput[]
    | VoteUpdateWithWhereUniqueWithoutPostInput;
  upsert?:
    | VoteUpsertWithWhereUniqueWithoutPostInput[]
    | VoteUpsertWithWhereUniqueWithoutPostInput;
}

export interface TagUpsertWithWhereUniqueNestedInput {
  where: TagWhereUniqueInput;
  update: TagUpdateDataInput;
  create: TagCreateInput;
}

export interface BoardUpsertWithoutTagsInput {
  update: BoardUpdateWithoutTagsDataInput;
  create: BoardCreateWithoutTagsInput;
}

export interface UserUpsertWithoutBoardsInput {
  update: UserUpdateWithoutBoardsDataInput;
  create: UserCreateWithoutBoardsInput;
}

export interface CompanyCreateWithoutUsersInput {
  name: String;
  color?: String;
  logoUrl?: String;
  faviconUrl?: String;
  subdomain?: String;
  boards?: BoardCreateManyWithoutCompanyInput;
  redirectURL?: String;
  doSendEmails?: Boolean;
}

export interface UserUpdateDataInput {
  fullName?: String;
  email?: String;
  password?: String;
  role?: String;
  companies?: CompanyUpdateManyWithoutUsersInput;
  boards?: BoardUpdateManyWithoutOwnerInput;
  postForms?: PostFormUpdateManyInput;
  isAdmin?: Boolean;
}

export interface BoardUpsertWithoutPostsInput {
  update: BoardUpdateWithoutPostsDataInput;
  create: BoardCreateWithoutPostsInput;
}

export interface PostFormSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PostFormWhereInput;
  AND?: PostFormSubscriptionWhereInput[] | PostFormSubscriptionWhereInput;
  OR?: PostFormSubscriptionWhereInput[] | PostFormSubscriptionWhereInput;
  NOT?: PostFormSubscriptionWhereInput[] | PostFormSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface VotePreviousValuesNode {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface VotePreviousValues
  extends Promise<VotePreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface VotePreviousValuesSubscription
  extends Promise<AsyncIterator<VotePreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface TagNode {
  id: ID_Output;
  title: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface Tag extends Promise<TagNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  board: <T = Board>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TagSubscription
  extends Promise<AsyncIterator<TagNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  board: <T = BoardSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BoardConnectionNode {}

export interface BoardConnection
  extends Promise<BoardConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<BoardEdgeNode>>() => T;
  aggregate: <T = AggregateBoard>() => T;
}

export interface BoardConnectionSubscription
  extends Promise<AsyncIterator<BoardConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BoardEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBoardSubscription>() => T;
}

export interface AggregateVoteNode {
  count: Int;
}

export interface AggregateVote
  extends Promise<AggregateVoteNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVoteSubscription
  extends Promise<AsyncIterator<AggregateVoteNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BoardNode {
  id: ID_Output;
  name: String;
  url: String;
  isPublic: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface Board extends Promise<BoardNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  url: () => Promise<String>;
  isPublic: () => Promise<Boolean>;
  postForm: <T = PostForm>() => T;
  tags: <T = FragmentableArray<TagNode>>(
    args?: {
      where?: TagWhereInput;
      orderBy?: TagOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  posts: <T = FragmentableArray<PostNode>>(
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  owner: <T = User>() => T;
  company: <T = Company>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface BoardSubscription
  extends Promise<AsyncIterator<BoardNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  isPublic: () => Promise<AsyncIterator<Boolean>>;
  postForm: <T = PostFormSubscription>() => T;
  tags: <T = Promise<AsyncIterator<TagSubscription>>>(
    args?: {
      where?: TagWhereInput;
      orderBy?: TagOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  owner: <T = UserSubscription>() => T;
  company: <T = CompanySubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface VoteConnectionNode {}

export interface VoteConnection
  extends Promise<VoteConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<VoteEdgeNode>>() => T;
  aggregate: <T = AggregateVote>() => T;
}

export interface VoteConnectionSubscription
  extends Promise<AsyncIterator<VoteConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VoteEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVoteSubscription>() => T;
}

export interface VoteEdgeNode {
  cursor: String;
}

export interface VoteEdge extends Promise<VoteEdgeNode>, Fragmentable {
  node: <T = Vote>() => T;
  cursor: () => Promise<String>;
}

export interface VoteEdgeSubscription
  extends Promise<AsyncIterator<VoteEdgeNode>>,
    Fragmentable {
  node: <T = VoteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface VoteNode {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface Vote extends Promise<VoteNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = User>() => T;
  post: <T = Post>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface VoteSubscription
  extends Promise<AsyncIterator<VoteNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  owner: <T = UserSubscription>() => T;
  post: <T = PostSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateUserNode {
  count: Int;
}

export interface AggregateUser
  extends Promise<AggregateUserNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUserNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface PostNode {
  id: ID_Output;
  title: String;
  details: String;
  joinedPictureUrl?: String;
  status: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface Post extends Promise<PostNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  details: () => Promise<String>;
  joinedPictureUrl: () => Promise<String>;
  tags: <T = FragmentableArray<TagNode>>(
    args?: {
      where?: TagWhereInput;
      orderBy?: TagOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  status: () => Promise<String>;
  votes: <T = FragmentableArray<VoteNode>>(
    args?: {
      where?: VoteWhereInput;
      orderBy?: VoteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  owner: <T = User>() => T;
  board: <T = Board>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PostSubscription
  extends Promise<AsyncIterator<PostNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  details: () => Promise<AsyncIterator<String>>;
  joinedPictureUrl: () => Promise<AsyncIterator<String>>;
  tags: <T = Promise<AsyncIterator<TagSubscription>>>(
    args?: {
      where?: TagWhereInput;
      orderBy?: TagOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  status: () => Promise<AsyncIterator<String>>;
  votes: <T = Promise<AsyncIterator<VoteSubscription>>>(
    args?: {
      where?: VoteWhereInput;
      orderBy?: VoteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  owner: <T = UserSubscription>() => T;
  board: <T = BoardSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserConnectionNode {}

export interface UserConnection
  extends Promise<UserConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<UserEdgeNode>>() => T;
  aggregate: <T = AggregateUser>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserPreviousValuesNode {
  id: ID_Output;
  fullName: String;
  email: String;
  password: String;
  role: String;
  isAdmin: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValues
  extends Promise<UserPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  fullName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  role: () => Promise<String>;
  isAdmin: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fullName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<String>>;
  isAdmin: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TagEdgeNode {
  cursor: String;
}

export interface TagEdge extends Promise<TagEdgeNode>, Fragmentable {
  node: <T = Tag>() => T;
  cursor: () => Promise<String>;
}

export interface TagEdgeSubscription
  extends Promise<AsyncIterator<TagEdgeNode>>,
    Fragmentable {
  node: <T = TagSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BoardSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface BoardSubscriptionPayload
  extends Promise<BoardSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Board>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BoardPreviousValues>() => T;
}

export interface BoardSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BoardSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BoardSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BoardPreviousValuesSubscription>() => T;
}

export interface AggregatePostFormNode {
  count: Int;
}

export interface AggregatePostForm
  extends Promise<AggregatePostFormNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostFormSubscription
  extends Promise<AsyncIterator<AggregatePostFormNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BoardPreviousValuesNode {
  id: ID_Output;
  name: String;
  url: String;
  isPublic: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface BoardPreviousValues
  extends Promise<BoardPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  url: () => Promise<String>;
  isPublic: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface BoardPreviousValuesSubscription
  extends Promise<AsyncIterator<BoardPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  isPublic: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostFormConnectionNode {}

export interface PostFormConnection
  extends Promise<PostFormConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<PostFormEdgeNode>>() => T;
  aggregate: <T = AggregatePostForm>() => T;
}

export interface PostFormConnectionSubscription
  extends Promise<AsyncIterator<PostFormConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostFormEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostFormSubscription>() => T;
}

export interface PostFormNode {
  id: ID_Output;
  heading: String;
  description?: String;
  title: String;
  titlePlaceholder: String;
  details: String;
  detailsPlaceholder: String;
  buttonText: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PostForm extends Promise<PostFormNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  heading: () => Promise<String>;
  description: () => Promise<String>;
  title: () => Promise<String>;
  titlePlaceholder: () => Promise<String>;
  details: () => Promise<String>;
  detailsPlaceholder: () => Promise<String>;
  buttonText: () => Promise<String>;
  board: <T = Board>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PostFormSubscription
  extends Promise<AsyncIterator<PostFormNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  heading: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  titlePlaceholder: () => Promise<AsyncIterator<String>>;
  details: () => Promise<AsyncIterator<String>>;
  detailsPlaceholder: () => Promise<AsyncIterator<String>>;
  buttonText: () => Promise<AsyncIterator<String>>;
  board: <T = BoardSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostEdgeNode {
  cursor: String;
}

export interface PostEdge extends Promise<PostEdgeNode>, Fragmentable {
  node: <T = Post>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdgeNode>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CompanySubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface CompanySubscriptionPayload
  extends Promise<CompanySubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Company>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CompanyPreviousValues>() => T;
}

export interface CompanySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CompanySubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CompanySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CompanyPreviousValuesSubscription>() => T;
}

export interface AggregateCompanyNode {
  count: Int;
}

export interface AggregateCompany
  extends Promise<AggregateCompanyNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCompanySubscription
  extends Promise<AsyncIterator<AggregateCompanyNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CompanyPreviousValuesNode {
  id: ID_Output;
  name: String;
  color: String;
  logoUrl?: String;
  faviconUrl?: String;
  subdomain?: String;
  redirectURL?: String;
  doSendEmails: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CompanyPreviousValues
  extends Promise<CompanyPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  color: () => Promise<String>;
  logoUrl: () => Promise<String>;
  faviconUrl: () => Promise<String>;
  subdomain: () => Promise<String>;
  redirectURL: () => Promise<String>;
  doSendEmails: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CompanyPreviousValuesSubscription
  extends Promise<AsyncIterator<CompanyPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  color: () => Promise<AsyncIterator<String>>;
  logoUrl: () => Promise<AsyncIterator<String>>;
  faviconUrl: () => Promise<AsyncIterator<String>>;
  subdomain: () => Promise<AsyncIterator<String>>;
  redirectURL: () => Promise<AsyncIterator<String>>;
  doSendEmails: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CompanyConnectionNode {}

export interface CompanyConnection
  extends Promise<CompanyConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<CompanyEdgeNode>>() => T;
  aggregate: <T = AggregateCompany>() => T;
}

export interface CompanyConnectionSubscription
  extends Promise<AsyncIterator<CompanyConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CompanyEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCompanySubscription>() => T;
}

export interface CompanyNode {
  id: ID_Output;
  name: String;
  color: String;
  logoUrl?: String;
  faviconUrl?: String;
  subdomain?: String;
  redirectURL?: String;
  doSendEmails: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface Company extends Promise<CompanyNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  color: () => Promise<String>;
  logoUrl: () => Promise<String>;
  faviconUrl: () => Promise<String>;
  subdomain: () => Promise<String>;
  users: <T = FragmentableArray<UserNode>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  boards: <T = FragmentableArray<BoardNode>>(
    args?: {
      where?: BoardWhereInput;
      orderBy?: BoardOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  redirectURL: () => Promise<String>;
  doSendEmails: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CompanySubscription
  extends Promise<AsyncIterator<CompanyNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  color: () => Promise<AsyncIterator<String>>;
  logoUrl: () => Promise<AsyncIterator<String>>;
  faviconUrl: () => Promise<AsyncIterator<String>>;
  subdomain: () => Promise<AsyncIterator<String>>;
  users: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  boards: <T = Promise<AsyncIterator<BoardSubscription>>>(
    args?: {
      where?: BoardWhereInput;
      orderBy?: BoardOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  redirectURL: () => Promise<AsyncIterator<String>>;
  doSendEmails: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BoardEdgeNode {
  cursor: String;
}

export interface BoardEdge extends Promise<BoardEdgeNode>, Fragmentable {
  node: <T = Board>() => T;
  cursor: () => Promise<String>;
}

export interface BoardEdgeSubscription
  extends Promise<AsyncIterator<BoardEdgeNode>>,
    Fragmentable {
  node: <T = BoardSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PostSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface PostSubscriptionPayload
  extends Promise<PostSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Post>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValues>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface UserEdgeNode {
  cursor: String;
}

export interface UserEdge extends Promise<UserEdgeNode>, Fragmentable {
  node: <T = User>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdgeNode>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PostPreviousValuesNode {
  id: ID_Output;
  title: String;
  details: String;
  joinedPictureUrl?: String;
  status: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PostPreviousValues
  extends Promise<PostPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  details: () => Promise<String>;
  joinedPictureUrl: () => Promise<String>;
  status: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  details: () => Promise<AsyncIterator<String>>;
  joinedPictureUrl: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TagConnectionNode {}

export interface TagConnection
  extends Promise<TagConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<TagEdgeNode>>() => T;
  aggregate: <T = AggregateTag>() => T;
}

export interface TagConnectionSubscription
  extends Promise<AsyncIterator<TagConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TagEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTagSubscription>() => T;
}

export interface UserSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayload
  extends Promise<UserSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = User>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValues>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface AggregatePostNode {
  count: Int;
}

export interface AggregatePost
  extends Promise<AggregatePostNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePostNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostFormSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface PostFormSubscriptionPayload
  extends Promise<PostFormSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostForm>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostFormPreviousValues>() => T;
}

export interface PostFormSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostFormSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostFormSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostFormPreviousValuesSubscription>() => T;
}

export interface CompanyEdgeNode {
  cursor: String;
}

export interface CompanyEdge extends Promise<CompanyEdgeNode>, Fragmentable {
  node: <T = Company>() => T;
  cursor: () => Promise<String>;
}

export interface CompanyEdgeSubscription
  extends Promise<AsyncIterator<CompanyEdgeNode>>,
    Fragmentable {
  node: <T = CompanySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface VoteSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface VoteSubscriptionPayload
  extends Promise<VoteSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Vote>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VotePreviousValues>() => T;
}

export interface VoteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VoteSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VoteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VotePreviousValuesSubscription>() => T;
}

export interface TagPreviousValuesNode {
  id: ID_Output;
  title: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TagPreviousValues
  extends Promise<TagPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TagPreviousValuesSubscription
  extends Promise<AsyncIterator<TagPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TagSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface TagSubscriptionPayload
  extends Promise<TagSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Tag>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TagPreviousValues>() => T;
}

export interface TagSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TagSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TagSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TagPreviousValuesSubscription>() => T;
}

export interface UserNode {
  id: ID_Output;
  fullName: String;
  email: String;
  password: String;
  role: String;
  isAdmin: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface User extends Promise<UserNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  fullName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  role: () => Promise<String>;
  companies: <T = FragmentableArray<CompanyNode>>(
    args?: {
      where?: CompanyWhereInput;
      orderBy?: CompanyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  boards: <T = FragmentableArray<BoardNode>>(
    args?: {
      where?: BoardWhereInput;
      orderBy?: BoardOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  postForms: <T = FragmentableArray<PostFormNode>>(
    args?: {
      where?: PostFormWhereInput;
      orderBy?: PostFormOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  isAdmin: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<UserNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fullName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<String>>;
  companies: <T = Promise<AsyncIterator<CompanySubscription>>>(
    args?: {
      where?: CompanyWhereInput;
      orderBy?: CompanyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  boards: <T = Promise<AsyncIterator<BoardSubscription>>>(
    args?: {
      where?: BoardWhereInput;
      orderBy?: BoardOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  postForms: <T = Promise<AsyncIterator<PostFormSubscription>>>(
    args?: {
      where?: PostFormWhereInput;
      orderBy?: PostFormOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  isAdmin: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostFormPreviousValuesNode {
  id: ID_Output;
  heading: String;
  description?: String;
  title: String;
  titlePlaceholder: String;
  details: String;
  detailsPlaceholder: String;
  buttonText: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PostFormPreviousValues
  extends Promise<PostFormPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  heading: () => Promise<String>;
  description: () => Promise<String>;
  title: () => Promise<String>;
  titlePlaceholder: () => Promise<String>;
  details: () => Promise<String>;
  detailsPlaceholder: () => Promise<String>;
  buttonText: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PostFormPreviousValuesSubscription
  extends Promise<AsyncIterator<PostFormPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  heading: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  titlePlaceholder: () => Promise<AsyncIterator<String>>;
  details: () => Promise<AsyncIterator<String>>;
  detailsPlaceholder: () => Promise<AsyncIterator<String>>;
  buttonText: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateTagNode {
  count: Int;
}

export interface AggregateTag extends Promise<AggregateTagNode>, Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTagSubscription
  extends Promise<AsyncIterator<AggregateTagNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateBoardNode {
  count: Int;
}

export interface AggregateBoard
  extends Promise<AggregateBoardNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBoardSubscription
  extends Promise<AsyncIterator<AggregateBoardNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostConnectionNode {}

export interface PostConnection
  extends Promise<PostConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<PostEdgeNode>>() => T;
  aggregate: <T = AggregatePost>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface PostFormEdgeNode {
  cursor: String;
}

export interface PostFormEdge extends Promise<PostFormEdgeNode>, Fragmentable {
  node: <T = PostForm>() => T;
  cursor: () => Promise<String>;
}

export interface PostFormEdgeSubscription
  extends Promise<AsyncIterator<PostFormEdgeNode>>,
    Fragmentable {
  node: <T = PostFormSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
